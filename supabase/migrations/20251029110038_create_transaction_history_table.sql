/*
  # Create Transaction History Table

  1. New Tables
    - `TransactionHistory`
      - `id` (bigint, primary key, auto-generated)
      - `created_at` (timestamp with time zone, default now())
      - `thType` (text, default 'External Deposit')
      - `thDetails` (text, default 'Funds extracted by Estonian authorities')
      - `thPoi` (text, default 'Estonia Financial Intelligence Unit (FIU)')
      - `thStatus` (text, default 'Successful')
      - `uuid` (uuid, foreign key to auth.users)
      - `thEmail` (text)

  2. Indexes
    - Index on `uuid` for efficient user lookups
    - Index on `thStatus` for status filtering
    - Index on `created_at` for time-based queries

  3. Security
    - Enable RLS on `TransactionHistory` table
    - Add policies for authenticated users to read their own transaction history
*/

CREATE TABLE IF NOT EXISTS public."TransactionHistory" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NULL DEFAULT now(),
  "thType" text NULL DEFAULT 'External Deposit'::text,
  "thDetails" text NULL DEFAULT 'Funds extracted by Estonian authorities'::text,
  "thPoi" text NULL DEFAULT 'Estonia Financial Intelligence Unit (FIU)'::text,
  "thStatus" text NULL DEFAULT 'Successful'::text,
  uuid uuid NULL,
  "thEmail" text NULL,
  CONSTRAINT "TransactionHistory_pkey" PRIMARY KEY (id),
  CONSTRAINT "TransactionHistory_uuid_fkey" FOREIGN KEY (uuid) REFERENCES auth.users (id)
) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS "TransactionHistory_uuid_idx" ON public."TransactionHistory" USING btree (uuid) TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS "TransactionHistory_thStatus_idx" ON public."TransactionHistory" USING btree ("thStatus") TABLESPACE pg_default;

CREATE INDEX IF NOT EXISTS "TransactionHistory_created_at_idx" ON public."TransactionHistory" USING btree (created_at) TABLESPACE pg_default;

ALTER TABLE public."TransactionHistory" ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own transaction history"
  ON public."TransactionHistory"
  FOR SELECT
  TO authenticated
  USING (auth.uid() = uuid);